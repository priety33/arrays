//quickselect
/*
 this algorithm reduces the size of the problem by approximately one half after each partition, giving the recurrence T(n) = T(n/2) + O(n) with O(n) being the time for partition. The solution is T(n) = O(n), which means we have found an average linear-time solution. However, in the worst case, the recurrence will become T(n) = T(n - 1) + O(n) and T(n) = O(n^2).
 */
class Solution {
public:
    
    int partition(int l, int h, vector<int>& nums) {
        int i=l-1;
        for(int j=l; j<h; j++) {
            if(nums[j]<=nums[h]) {
                i++;
                swap(nums[i], nums[j]);
            }
        }
        i++;
        swap(nums[i], nums[h]);
        return i;
    }
    
    int helper(int l, int h, vector<int>& nums, int k) {
        int index= partition(l, h, nums);
        if(index==nums.size()-k) return nums[index];
        else if(index>nums.size()-k) return helper(l, index-1, nums, k);
        return helper(index+1, h, nums, k);
    }
    
    int findKthLargest(vector<int>& nums, int k) {
        return helper(0, nums.size()-1, nums, k);
    }
};
